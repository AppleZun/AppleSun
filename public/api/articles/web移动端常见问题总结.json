{"title":"web移动端常见问题总结","slug":"web移动端常见问题总结","date":"2016-06-20T16:06:14.000Z","updated":"2017-06-29T01:14:13.611Z","comments":true,"excerpt":"<p>在这里我将介绍一些移动端常见问题的总结，觉得喜欢的也可以转载收藏</p>","content":"<p>在这里我将介绍一些移动端常见问题的总结，觉得喜欢的也可以转载收藏</p>\n<a id=\"more\"></a>\n<h2 id=\"Meta标签：\"><a href=\"#Meta标签：\" class=\"headerlink\" title=\"Meta标签：\"></a>Meta标签：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;meta content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, </div><div class=\"line\">user-scalable=0;&quot; name=&quot;viewport&quot; /&gt;</div></pre></td></tr></table></figure>\n<p>这个想必大家都知道，当页面在手机上显示时，增加这个meta可以是页面强制让文档的宽度与设备的宽度保持1：1，并且文档最大的宽度比例是1.0，且不允许用户点击屏幕放大浏览。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;meta content=&quot;telephone=no&quot; name=&quot;format-detection&quot; /&gt;</div><div class=\"line\">&lt;meta content=&quot;email=no&quot; name=&quot;format-detection&quot; /&gt;</div></pre></td></tr></table></figure>\n<p>这两个属性分别对ios上自动识别电话和android上自动识别邮箱做了限制。避免了点击长串数字就拨号的尴尬</p>\n<h2 id=\"获取滚动条的值：\"><a href=\"#获取滚动条的值：\" class=\"headerlink\" title=\"获取滚动条的值：\"></a>获取滚动条的值：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">window.scrollY window.scrollX</div></pre></td></tr></table></figure>\n<p>桌面浏览器中想要获取滚动条的值是通过document.scrollTop和document.scrollLeft得到的，但在iOS中你会发现这两个属性是未定义的，为什么呢?因为在iOS中没有滚动条的概念，在Android中通过这两个属性可以正常获取到滚动条的值，那么在iOS中我们该如何获取滚动条的值呢?就是上面两个属性，但是事实证明android也支持这属性，所以索性都用woindow.scroll.</p>\n<h2 id=\"禁止选择文本\"><a href=\"#禁止选择文本\" class=\"headerlink\" title=\"禁止选择文本\"></a>禁止选择文本</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-webkit-user-select:none</div></pre></td></tr></table></figure>\n<p>禁止用户选择文本，ios和android都支持</p>\n<h2 id=\"屏蔽阴影\"><a href=\"#屏蔽阴影\" class=\"headerlink\" title=\"屏蔽阴影\"></a>屏蔽阴影</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-webkit-appearance:none</div></pre></td></tr></table></figure>\n<p>亲测，可以同时屏蔽输入框怪异的内阴影，解决iOS下无法修改按钮样式，测试还发现一个小问题就是，加了上面的属性后，iOS下默认还是带有圆角的，不过可以使用border-radius属性修改。</p>\n<h2 id=\"CSS之border-box\"><a href=\"#CSS之border-box\" class=\"headerlink\" title=\"CSS之border-box:\"></a>CSS之border-box:</h2><p>那我想要一个元素100%显示，又必须有一个固定的padding-left/padding-right，还有1px的边框，怎么办?这样编写代码必然导致出现横向滚动条，肿么办?要相信问题就是用来解决的。这时候伟大的css3为我们提供了box-sizing属性，对于这个属性的具体解释不做赘述(想深入了解的同学可以到w3school查看，要知道自己动手会更容易记忆)。让我们看看如何解决上面的问题：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">element&#123;</div><div class=\"line\">　　width: 100%;</div><div class=\"line\">　　padding-left: 10px;</div><div class=\"line\">　　box-sizing:border-box;</div><div class=\"line\">　　-webkit-box-sizing:border-box;</div><div class=\"line\">　　border: 1px solid blue;</div><div class=\"line\">　　&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"CSS3多文本换行：\"><a href=\"#CSS3多文本换行：\" class=\"headerlink\" title=\"CSS3多文本换行：\"></a>CSS3多文本换行：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">p &#123;</div><div class=\"line\">　　overflow : hidden;</div><div class=\"line\">　　text-overflow: ellipsis;</div><div class=\"line\">　　display: -webkit-box;</div><div class=\"line\">　　-webkit-line-clamp: 2;</div><div class=\"line\">　　-webkit-box-orient: vertical;</div><div class=\"line\">　　&#125;</div></pre></td></tr></table></figure>\n<p>Webkit支持一个名为-webkit-line-clamp的属性，也就是说这个属性并不是标准的一部分，可能是Webkit内部使用的，或者被弃用的属性。需要注意的是display需要设置成box，-webkit-line-clamp表示需要显示几行。</p>\n<h2 id=\"Retina屏幕高清图片：\"><a href=\"#Retina屏幕高清图片：\" class=\"headerlink\" title=\"Retina屏幕高清图片：\"></a>Retina屏幕高清图片：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">selector &#123;</div><div class=\"line\">　　background-image: none;</div><div class=\"line\">　　background: image-set(url(foo-lowres.png) 1x,url(foo-highres.png) 2x) center;</div><div class=\"line\">　　&#125;</div></pre></td></tr></table></figure>\n<p>image-set的语法，类似于不同的文本，图像也会显示成不同的：</p>\n<ul>\n<li>不支持image-set：在不支持image-set的浏览器下，他会支持background-image图像，也就是说不支持image-set的浏览器下，他们解析background-image中的背景图像;</li>\n<li>支持image-set：如果你的浏览器支持image-sete，而且是普通显屏下，此时浏览器会选择image-set中的@1x背景图像;</li>\n<li>Retina屏幕下的image-set：如果你的浏览器支持image-set，而且是在Retina屏幕下，此时浏览器会选择image-set中的@2x背景图像。</li>\n</ul>\n<h2 id=\"html5重力感应事件：\"><a href=\"#html5重力感应事件：\" class=\"headerlink\" title=\"html5重力感应事件：\"></a>html5重力感应事件：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (window.DeviceMotionEvent) &#123;</div><div class=\"line\">　　window.addEventListener(&apos;devicemotion&apos;,deviceMotionHandler, false);</div><div class=\"line\">　　&#125;</div><div class=\"line\">　　var speed = 30;//speed</div><div class=\"line\">　　var x = y = z = lastX = lastY = lastZ = 0;</div><div class=\"line\">　　function deviceMotionHandler(eventData) &#123;</div><div class=\"line\">　　var acceleration =event.accelerationIncludingGravity;</div><div class=\"line\">　　x = acceleration.x;</div><div class=\"line\">　　y = acceleration.y;</div><div class=\"line\">　　z = acceleration.z;</div><div class=\"line\">　　if(Math.abs(x-lastX) &gt; speed || Math.abs(y-lastY) &gt; speed || </div><div class=\"line\">Math.abs(z-lastZ) &gt; speed) &#123;</div><div class=\"line\">　　//简单的摇一摇触发代码</div><div class=\"line\">　　alert(1);</div><div class=\"line\">　　&#125;</div><div class=\"line\">　　lastX = x;</div><div class=\"line\">　　lastY = y;</div><div class=\"line\">　　lastZ = z;</div><div class=\"line\">　　&#125;i</div></pre></td></tr></table></figure>\n<p>关于deviceMotionEvent是HTML5新增的事件，用来检测手机重力感应效果具体可参考<a href=\"http://w3c.github.io/deviceorientation/spec-source-orientation.html\" target=\"_blank\" rel=\"external\">w3c-deviceorientation</a></p>\n<h2 id=\"移动端touch事件：\"><a href=\"#移动端touch事件：\" class=\"headerlink\" title=\"移动端touch事件：\"></a>移动端touch事件：</h2><ul>\n<li>touchstart //当手指接触屏幕时触发</li>\n<li>touchmove //当已经接触屏幕的手指开始移动后触发</li>\n<li>touchend //当手指离开屏幕时触发</li>\n<li>touchcancel//当某种touch事件非正常结束时触发</li>\n</ul>\n<p>这4个事件的触发顺序为：<br><code>touchstart</code> -&gt; <code>touchmove</code> -&gt; <code>touchend</code> -&gt;<code>touchcancel</code></p>\n<h5 id=\"对于某些android系统touch的bug\"><a href=\"#对于某些android系统touch的bug\" class=\"headerlink\" title=\"对于某些android系统touch的bug:\"></a>对于某些android系统touch的bug:</h5><p>比如手指在屏幕由上向下拖动页面时，理论上是会触发 一个touchstart ，很多次touchmove，和最终的touchend，可是在<code>android 4.0上</code>，<code>touchmove只被触发一次</code>，触发时间和touchstart差不多，而<code>touchend直接没有被触发</code>。这是一个非常严重的bug，在google Issue已有不少人提出，这个很蛋疼的bug是在模拟下拉刷新是遇到的尤其当touchmove的dom节点数量变多时比出现，当时解决办法就是用<code>settimeout来稀释touchmove</code>。</p>\n<h2 id=\"单击延迟：\"><a href=\"#单击延迟：\" class=\"headerlink\" title=\"单击延迟：\"></a>单击延迟：</h2><p>click事件因为要等待双击确认，会有300ms的延迟，体验并不是很好。</p>\n<p>开发者大多数会使用封装的 tap 事件来代替click 事件，所谓的 tap 事件由 touchstart 事件+touchmove判断+touchend事件封装组成。</p>\n<ul>\n<li>Creating Fast Buttons for Mobile Web Applications</li>\n<li>Eliminate 300ms delay on click events in mobile Safari</li>\n</ul>\n<h2 id=\"IOS里面fixed的文本框焦点居中：\"><a href=\"#IOS里面fixed的文本框焦点居中：\" class=\"headerlink\" title=\"IOS里面fixed的文本框焦点居中：\"></a>IOS里面fixed的文本框焦点居中：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">　　&lt;head&gt;</div><div class=\"line\">　　input &#123;</div><div class=\"line\">　　position:fixed;</div><div class=\"line\">　　top:0;left:0;</div><div class=\"line\">　　&#125;</div><div class=\"line\">　　&lt;/head&gt;</div><div class=\"line\">　　&lt;body&gt;</div><div class=\"line\">　　&lt;div class=&quot;header&quot;&gt;</div><div class=\"line\">　　&lt;form action=&quot;&quot;&gt;</div><div class=\"line\">　　&lt;label&gt;Testfield: &lt;input type=&quot;text&quot; /&gt;&lt;/label&gt;</div><div class=\"line\">　　&lt;/form&gt;</div><div class=\"line\">　　&lt;/div&gt;</div><div class=\"line\">　　&lt;/body&gt;</div><div class=\"line\">　　&lt;/html&gt;</div></pre></td></tr></table></figure>\n<p>在ios里面，当一个文本框的样式为fixed时，如果这个文本框获得焦点，它的位置就会乱掉，由于ios里面做了自适应居中，这个fixed的文本框会跑到页面中间。类似：<br><img src=\"http://7xjdah.com1.z0.glb.clouddn.com/pic2016051603.png\" alt=\"img\"></p>\n<h5 id=\"解决办法有2个：\"><a href=\"#解决办法有2个：\" class=\"headerlink\" title=\"解决办法有2个：\"></a>解决办法有2个：</h5><ul>\n<li>可以在文本框获得焦点的时候将fixed改为absolute，失去焦点时在改回fixed，但是这样会让屏幕有上下滑动的体验不太好。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">.fixfixed &#123;</div><div class=\"line\">　　position:absolute;</div><div class=\"line\">　　&#125;</div><div class=\"line\">　　$(document)</div><div class=\"line\">　　.on(&apos;focus&apos;, &apos;input&apos;, function(e) &#123;</div><div class=\"line\">　　$this.addClass(&apos;fixfixed&apos;);</div><div class=\"line\">　　&#125;)</div><div class=\"line\">　　.on(&apos;blur&apos;, &apos;input&apos;, function(e) &#123;</div><div class=\"line\">　　$this.removeClass(&apos;fixfixed&apos;);</div><div class=\"line\">　　&#125;);</div></pre></td></tr></table></figure>\n<ul>\n<li>还有一种就是用一个假的fixed的文本框放在页面顶部，一个absolute的文本框隐藏在页面顶部，当fixed的文本框获得焦点时候将其隐藏，然后显示absolute的文本框，当失去焦点时，在把absolute的文本框隐藏，fixed的文本框显示。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">.fixfixed &#123;</div><div class=\"line\">　　position:absolute;</div><div class=\"line\">　　&#125;</div><div class=\"line\">　　$(document)</div><div class=\"line\">　　.on(&apos;focus&apos;, &apos;input&apos;, function(e) &#123;</div><div class=\"line\">　　$absolute..show();</div><div class=\"line\">　　$this.hide();</div><div class=\"line\">　　&#125;)</div><div class=\"line\">　　.on(&apos;blur&apos;, &apos;input&apos;, function(e) &#123;</div><div class=\"line\">　　$fixed..show();</div><div class=\"line\">　　$this.hide();</div><div class=\"line\">　　&#125;);</div></pre></td></tr></table></figure>\n<ul>\n<li>最后一种就是顶部的input不参与滚动，只让其下面滚动。</li>\n</ul>\n<h2 id=\"position-sticky\"><a href=\"#position-sticky\" class=\"headerlink\" title=\"position:sticky\"></a>position:sticky</h2><p>position:sticky是一个新的css3属性，它的表现类似position:relative和position:fixed的合体，在目标区域在屏幕中可见时，它的行为就像position:relative;<br>而当页面滚动超出目标区域时，它的表现就像position:fixed，它会固定在目标位置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">.sticky &#123;</div><div class=\"line\">　　position: -webkit-sticky;</div><div class=\"line\">　　position:sticky;</div><div class=\"line\">　　top: 15px;</div><div class=\"line\">　　&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"浏览器兼容性：\"><a href=\"#浏览器兼容性：\" class=\"headerlink\" title=\"浏览器兼容性：\"></a>浏览器兼容性：</h2><p>由于这是一个全新的属性，以至于到现在都没有一个规范，W3C也刚刚开始讨论它，而现在只有webkit nightly版本和chrome开发版(Chrome 23.0.1247.0+ Canary)才开始支持它。</p>\n<p>　　另外需要注意的是，如果同时定义了left和right值，那幺left生效，right会无效，同样，同时定义了top和bottom，top赢～</p>\n<h2 id=\"移动端点透事件\"><a href=\"#移动端点透事件\" class=\"headerlink\" title=\"移动端点透事件\"></a>移动端点透事件</h2><p>简单的说，由于在移动端我们经常会使用tap(touchstart)事件来替换掉click事件，那幺就会有一种场景是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;mengceng&quot;&gt;&lt;/div&gt;</div><div class=\"line\">&lt;a href=&quot;www.qq.com&quot;&gt;www.qq.com&lt;/a&gt;</div></pre></td></tr></table></figure>\n<p>div是绝对定位的蒙层z-index高于a，而a标签是页面中的一个链接，我们给div绑定tap事件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(&apos;#mengceng&apos;).on(&apos;tap&apos;,function()&#123;</div><div class=\"line\">$(&apos;#mengceng&apos;).hide();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>我们点击蒙层时 div正常消失，但是当我们在a标签上点击蒙层时，发现a链接被触发，这就是所谓的点透事件。</p>\n<h3 id=\"原因：\"><a href=\"#原因：\" class=\"headerlink\" title=\"原因：\"></a>原因：</h3><h5 id=\"touchstart-早于-touchend-早于click。亦即click的触发是有延迟的，这个时间大概在300ms左右，也就是说我们tap触发之后蒙层隐藏，此时click还没有触发，300ms之后由于蒙层隐藏，我们的click触发到了下面的a链接上。\"><a href=\"#touchstart-早于-touchend-早于click。亦即click的触发是有延迟的，这个时间大概在300ms左右，也就是说我们tap触发之后蒙层隐藏，此时click还没有触发，300ms之后由于蒙层隐藏，我们的click触发到了下面的a链接上。\" class=\"headerlink\" title=\"touchstart 早于 touchend 早于click。亦即click的触发是有延迟的，这个时间大概在300ms左右，也就是说我们tap触发之后蒙层隐藏，此时click还没有触发，300ms之后由于蒙层隐藏，我们的click触发到了下面的a链接上。\"></a>touchstart 早于 touchend 早于click。亦即click的触发是有延迟的，这个时间大概在300ms左右，也就是说我们tap触发之后蒙层隐藏，此时click还没有触发，300ms之后由于蒙层隐藏，我们的click触发到了下面的a链接上。</h5><h3 id=\"解决办法：\"><a href=\"#解决办法：\" class=\"headerlink\" title=\"解决办法：\"></a>解决办法：</h3><ol>\n<li>尽量都使用<code>touch事件来替换click</code>事件。</li>\n</ol>\n<ol>\n<li><code>阻止</code>a链接的click的<code>preventDefault</code></li>\n</ol>\n<h2 id=\"base64编码图片替换url图片\"><a href=\"#base64编码图片替换url图片\" class=\"headerlink\" title=\"base64编码图片替换url图片\"></a>base64编码图片替换url图片</h2><p>u在移动端，网络请求是很珍贵的资源，尤其在2g或者3g网络下，所以能不发请求的资源都尽量不要发，对于一些小图片icon之类的，可以将图片用base64编码，来减少网络请求。</p>\n<h2 id=\"手机拍照和上传图片\"><a href=\"#手机拍照和上传图片\" class=\"headerlink\" title=\"手机拍照和上传图片\"></a>手机拍照和上传图片</h2><p>的accept 属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 选择照片 --&gt;</div><div class=\"line\">&lt;input type=file accept=&quot;image/*&quot;&gt;</div><div class=\"line\">&lt;!-- 选择视频 --&gt;</div><div class=\"line\">&lt;input type=file accept=&quot;video/*&quot;&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"动画效果时开启硬件加速\"><a href=\"#动画效果时开启硬件加速\" class=\"headerlink\" title=\"动画效果时开启硬件加速\"></a>动画效果时开启硬件加速</h2><p>我们在制作动画效果时经常会想要改版元素的top或者left来让元素动起来，在pc端还好但是移动端就会有较大的卡顿感，这幺我们需要使用css3的transform: translate3d;来替换，</p>\n<p>此效果可以让浏览器开启gpu加速，渲染更流畅，但是笔着实验时在ios上体验良好，但在一些低端android机型可能会出现意想不到的效果。</p>\n<h2 id=\"快速回弹滚动\"><a href=\"#快速回弹滚动\" class=\"headerlink\" title=\"快速回弹滚动\"></a>快速回弹滚动</h2><p>在iOS上如果你想让一个元素拥有像 Native 的滚动效果，你可以这样做：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">.div &#123;</div><div class=\"line\">　　overflow: auto;</div><div class=\"line\">　　-webkit-overflow-scrolling: touch;</div><div class=\"line\">　　&#125;</div></pre></td></tr></table></figure>\n<p>经笔者测试，此效果在不同的ios系统表现不一致：</p>\n<ul>\n<li>对于局部滚动，ios8以上，不加此效果，滚动的超级慢，ios8一下，不加此效果，滚动还算比较流畅</li>\n<li>对于body滚动，ios8以上，不加此效果同样拥有弹性滚动效果。</li>\n</ul>\n<h2 id=\"ios和android局部滚动时隐藏塬生滚动条\"><a href=\"#ios和android局部滚动时隐藏塬生滚动条\" class=\"headerlink\" title=\"ios和android局部滚动时隐藏塬生滚动条\"></a>ios和android局部滚动时隐藏塬生滚动条</h2><p>Android:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">::-webkit-scrollbar&#123;</div><div class=\"line\">　　opacity: 0;</div><div class=\"line\">　　&#125;</div></pre></td></tr></table></figure>\n<p>IOS:</p>\n<p>使用一个稍微高一些div包裹住这个有滚动条的div然后设置overflow:hidden挡住之</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">.wrap&#123;</div><div class=\"line\">　　height: 100px;</div><div class=\"line\">　　overflow: hidden;</div><div class=\"line\">　　&#125;</div><div class=\"line\">　　.box&#123;</div><div class=\"line\">　　width: 100%;</div><div class=\"line\">　　height: -webkit-calc(100% + 5px);</div><div class=\"line\">　　overflow-x: auto;</div><div class=\"line\">　　overflow-y: hidden;</div><div class=\"line\">　　-webkit-overflow-scrolling: touch;</div><div class=\"line\">　　&#125;</div><div class=\"line\">　　&lt;div class=&quot;wrap&quot;&gt;</div><div class=\"line\">　　&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</div><div class=\"line\">　　&lt;/div&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"设置placeholder时候-focus时候文字没有隐藏\"><a href=\"#设置placeholder时候-focus时候文字没有隐藏\" class=\"headerlink\" title=\"设置placeholder时候 focus时候文字没有隐藏\"></a>设置placeholder时候 focus时候文字没有隐藏</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">input:focus::-webkit-input-placeholder&#123;</div><div class=\"line\">　　opacity: 0;</div><div class=\"line\">　　&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"移动端不同的input对应不同的键盘展示样式\"><a href=\"#移动端不同的input对应不同的键盘展示样式\" class=\"headerlink\" title=\"移动端不同的input对应不同的键盘展示样式\"></a>移动端不同的input对应不同的键盘展示样式</h2><h4 id=\"ios-—-android\"><a href=\"#ios-—-android\" class=\"headerlink\" title=\"ios —- android\"></a>ios —- android</h4><ul>\n<li>输入邮箱时：</li>\n</ul>\n<p><img src=\"http://7xjdah.com1.z0.glb.clouddn.com/pic2016051604.png\" alt=\"img\"></p>\n<ul>\n<li>输入网址时：</li>\n</ul>\n<p><img src=\"http://7xjdah.com1.z0.glb.clouddn.com/pic2016051605.png\" alt=\"img\"></p>\n<ul>\n<li>输入号码时：</li>\n</ul>\n<p><img src=\"http://7xjdah.com1.z0.glb.clouddn.com/pic2016051606.png\" alt=\"img\"></p>\n<ul>\n<li>选字搜索时：</li>\n</ul>\n<p><img src=\"http://7xjdah.com1.z0.glb.clouddn.com/pic2016051607.png\" alt=\"img\"></p>\n<p><a href=\"http://www.nihaoshijie.com.cn/index.php/archives/455\" target=\"_blank\" rel=\"external\">参考资料</a><br>　<a href=\"http://www.alloyteam.com/2015/06/yi-dong-web-wen-ti-xiao-jie/\" target=\"_blank\" rel=\"external\">来源AlloyTeam</a> 　</p>\n","categories":[],"tags":[{"name":"web","path":"api/tags/web.json"},{"name":"移动端","path":"api/tags/移动端.json"},{"name":"总结","path":"api/tags/总结.json"}]}