{"title":"JS面向对象面试题1","slug":"JS面向对象面试题1","date":"2016-06-30T16:17:01.000Z","updated":"2017-06-29T01:14:13.580Z","comments":true,"excerpt":"<p>学习JS过程中，迷茫的我们会考虑研究一些面试题来测试自己对于这块知识是否真的搞懂了，在浏览过程中，看见歇一歇比较有代表性的js 问题，由于很容易让人轻视，所以能 全部答对的少之又少。让我们来瞧瞧这些题目吧！<br>题目：</p>","content":"<p>学习JS过程中，迷茫的我们会考虑研究一些面试题来测试自己对于这块知识是否真的搞懂了，在浏览过程中，看见歇一歇比较有代表性的js 问题，由于很容易让人轻视，所以能 全部答对的少之又少。让我们来瞧瞧这些题目吧！<br>题目：</p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*题干开始*/</div><div class=\"line\">function Foo()&#123;</div><div class=\"line\">\tgetName=function()&#123;</div><div class=\"line\">\talert(1);&#125;;</div><div class=\"line\">\treturn this;&#125;;</div><div class=\"line\">Foo.getName=function()&#123;alert(2);&#125;;</div><div class=\"line\">Foo.prototype.getName=function()&#123;alert(3);&#125;;</div><div class=\"line\">var getName=function()&#123;alert(4);&#125;;</div><div class=\"line\">function getName()&#123;alert(5);&#125;;</div><div class=\"line\">/*题干结束*/</div><div class=\"line\">/*提问开始*/</div><div class=\"line\">请输出以下输出结果：</div><div class=\"line\">Foo.getName();</div><div class=\"line\">getName();</div><div class=\"line\">Foo().getName();</div><div class=\"line\">getName();</div><div class=\"line\">new Foo.getName();</div><div class=\"line\">new Foo().getName();</div><div class=\"line\">new new Foo().getName();</div><div class=\"line\">/*提问结束*/</div></pre></td></tr></table></figure>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>看到上面的题目，我会把题干的排序变成这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Foo()&#123;</div><div class=\"line\">\tgetName=function()&#123;</div><div class=\"line\">\talert(1);&#125;;</div><div class=\"line\">\treturn this;&#125;;</div><div class=\"line\">function getName()&#123;alert(5);&#125;;//提升函数声明，覆盖var的声明</div><div class=\"line\">var getName；//只提升变量声明</div><div class=\"line\">Foo.getName=function()&#123;alert(2);&#125;;</div><div class=\"line\">Foo.prototype.getName=function()&#123;alert(3);&#125;;</div><div class=\"line\">getName=function()&#123;alert(4);&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"首先为什么要这样子排序：\"><a href=\"#首先为什么要这样子排序：\" class=\"headerlink\" title=\"首先为什么要这样子排序：\"></a>首先为什么要这样子排序：</h3><p>这里涉及到浏览器对于js 的解析，<strong>浏览器解析到函数</strong>时，会把<strong>一般函数提到前面进行解析</strong>不管函数是否会执行，排列顺序而言已经在前面了；可能你会注意到我把<code>var getName=function(){alert(4);};</code>改成了<code>var getName；getName=function(){alert(4);};</code>这种写法涉及到我们学过的知识点：<strong>变量声明提升以及函数表达式</strong>；</p>\n<h5 id=\"什么叫做函数表达式\"><a href=\"#什么叫做函数表达式\" class=\"headerlink\" title=\"什么叫做函数表达式\"></a>什么叫做函数表达式</h5><p>var getName 与 function getName 都是声明语句，区别在于 var getName 是函数表达式，而 function getName 是函数声明。关于JS中的各种函数创建方式可以看 <a href=\"http://www.codeceo.com/article/javascript-closure-interview.html\" target=\"_blank\" rel=\"external\">大部分人都会做错的经典JS闭包面试题</a> 这篇文章有详细说明。</p>\n<p><strong>函数表达式最大的问题，在于js会将此代码拆分为两行代码分别执行</strong>。所以就变成了我上述的排序</p>\n<h3 id=\"所以看到题目先排序是个很好的习惯。\"><a href=\"#所以看到题目先排序是个很好的习惯。\" class=\"headerlink\" title=\"所以看到题目先排序是个很好的习惯。\"></a>所以看到题目先排序是个很好的习惯。</h3><h5 id=\"解读第一题：\"><a href=\"#解读第一题：\" class=\"headerlink\" title=\"解读第一题：\"></a>解读第一题：</h5><p>问Foo.getName(),在题干中与之相匹配的是弹出“2”，并且下面没有函数会覆盖，所以第一题答案为2，很明显的一道送分题， <strong>拿下！！！</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">getName()/*结果为2*/</div></pre></td></tr></table></figure>\n<h5 id=\"解读第二题：\"><a href=\"#解读第二题：\" class=\"headerlink\" title=\"解读第二题：\"></a>解读第二题：</h5><p>问getName()，在题干中与之相匹配的是弹出“5”和弹出“4”，因为最下面的4是重新赋值的忙所以5被覆盖，所以此题答案为4（解题逻辑参考排序） <strong>拿下！！！</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Foo.getName()/*结果为4*/</div></pre></td></tr></table></figure>\n<h5 id=\"解读第三题：\"><a href=\"#解读第三题：\" class=\"headerlink\" title=\"解读第三题：\"></a>解读第三题：</h5><p>问Foo().getName()，好的，先执行Foo函数,执行后，首先，会把<code>getName=function(){alert(1);};</code>这一函数暴露在整个题干底部了，由于Foo()返回值为this,所以此处的<strong>this 指向window</strong>（待会儿分析），此时整个函数变成了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Foo()&#123;</div><div class=\"line\">\tgetName=function()&#123;</div><div class=\"line\">\talert(1);&#125;;</div><div class=\"line\">\treturn this;&#125;;</div><div class=\"line\">function getName()&#123;alert(5);&#125;;//提升函数声明，覆盖var的声明</div><div class=\"line\">var getName；//只提升变量声明</div><div class=\"line\">Foo.getName=function()&#123;alert(2);&#125;;</div><div class=\"line\">Foo.prototype.getName=function()&#123;alert(3);&#125;;</div><div class=\"line\">getName=function()&#123;alert(4);&#125;;</div><div class=\"line\">getName=function()&#123;alert(1);&#125;;</div><div class=\"line\">求解</div><div class=\"line\">window.getName()的输出结果是什么</div></pre></td></tr></table></figure>\n<p>在此匹配到了 弹出“5”，弹出“4”和弹出“1”，由于下面覆盖上面的原因，所以此题答案为1 <strong>拿下！！！</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Foo().getName()/*结果为4*/</div></pre></td></tr></table></figure>\n<h3 id=\"this-的指向问题\"><a href=\"#this-的指向问题\" class=\"headerlink\" title=\"this 的指向问题\"></a>this 的指向问题</h3><ul>\n<li>当全局作用域下直接调用this，指向window</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(this)</div></pre></td></tr></table></figure>\n<ul>\n<li>普通函数下调用this，指向window</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var aa=function()&#123;</div><div class=\"line\">\treturn this</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>作用对象属性调用this，指向对象本身</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">function aa()&#123;</div><div class=\"line\">\tthis.name=&quot;apple&quot;</div><div class=\"line\">&#125;</div><div class=\"line\">var bbb = new aa();</div><div class=\"line\">alert(bbb.name)</div></pre></td></tr></table></figure>\n<h5 id=\"解读第四题：\"><a href=\"#解读第四题：\" class=\"headerlink\" title=\"解读第四题：\"></a>解读第四题：</h5><p>问getName()，由于上面的Foo()的函数暴露在正割函数底部，所以，在此执行getName()，得到的结果依然是“1”，上面一题对了，这一题是真的送分。<strong>拿下！！！</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Foo().getName()/*结果为4*/</div></pre></td></tr></table></figure>\n<h2 id=\"在解答下面问题前，有必要先了解-JS运算优先级排序\"><a href=\"#在解答下面问题前，有必要先了解-JS运算优先级排序\" class=\"headerlink\" title=\"在解答下面问题前，有必要先了解 JS运算优先级排序\"></a>在解答下面问题前，有必要先了解 JS运算优先级排序</h2><p><img src=\"http://7xjdah.com1.z0.glb.clouddn.com/pic2016051620.png\" alt=\"img\"><br><img src=\"http://7xjdah.com1.z0.glb.clouddn.com/pic2016051621.png\" alt=\"img\"><br><img src=\"http://7xjdah.com1.z0.glb.clouddn.com/pic2016051622.png\" alt=\"img\"><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\" target=\"_blank\" rel=\"external\">参考资料</a></p>\n<h5 id=\"解读第五题：\"><a href=\"#解读第五题：\" class=\"headerlink\" title=\"解读第五题：\"></a>解读第五题：</h5><p>问new Foo.getName(),首先我们得明白一点，就是 先拆分 问题 到底想叫我们做什么！！！</p>\n<p>经过对于 JS面对对象的学习，知道js运算优先级，不难看出，这里可以看成是 new function(){}，所以先考虑后面的函数部分Foo.getName()的执行结果通过匹配题干可知为“2”，此时等同于</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">new function()&#123;</div><div class=\"line\">alert(2)&#125;</div></pre></td></tr></table></figure>\n<p>毫无疑问，这题结果等于2，看吧，掌握了JS面向对象的基本知识点，解决这类面试题简直简单的不要不要的。<strong>拿下！！！</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">new Foo.getName()/*结果为2*/</div></pre></td></tr></table></figure>\n<h5 id=\"解读第六题：\"><a href=\"#解读第六题：\" class=\"headerlink\" title=\"解读第六题：\"></a>解读第六题：</h5><p>问new Foo().getName()，根据 优先级，实际执行情况为：先<code>new Foo()</code>在与后面的<code>getName()</code>综合考虑，这里有需要借助<code>构造函数返回值问题</code>。原题中，返回的是this，而this在构造函数中本来就代表当前实例化对象，遂最终Foo函数返回实例化对象。</p>\n<p>之后调用实例化对象的getName函数，因为在Foo构造函数中没有为实例化对象添加任何属性，遂到当前对象的原型对象（prototype）中寻找getName，找到了。此题答案为“2”<strong>有难点，但是没有超纲，继续</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">new Foo().getName()/*结果为3*/</div></pre></td></tr></table></figure>\n<h4 id=\"构造函数返回值\"><a href=\"#构造函数返回值\" class=\"headerlink\" title=\"构造函数返回值\"></a>构造函数返回值</h4><p>在传统语言中，构造函数不应该有返回值，实际执行的返回值就是此构造函数的实例化对象。</p>\n<p>而在js中构造函数可以有返回值也可以没有。</p>\n<ul>\n<li>没有返回值则按照其他语言一样返回实例化对象。<br><img src=\"http://7xjdah.com1.z0.glb.clouddn.com/pic2016051623.png\" alt=\"img\"></li>\n<li>若有返回值则检查其返回值是否为引用类型。如果是非引用类型，如基本类型（string,number,boolean,null,undefined）则与无返回值相同，实际返回其实例化对象。<br><img src=\"http://7xjdah.com1.z0.glb.clouddn.com/pic2016051624.png\" alt=\"img\"></li>\n<li>若返回值是引用类型，则实际返回值为这个引用类型。</li>\n</ul>\n<p><img src=\"http://7xjdah.com1.z0.glb.clouddn.com/pic2016051625.png\" alt=\"img\"></p>\n<h5 id=\"解读第七题：\"><a href=\"#解读第七题：\" class=\"headerlink\" title=\"解读第七题：\"></a>解读第七题：</h5><p>问new new Foo().getName()，考虑优先级，先<code>new Foo()</code>在与后面的<code>getName()</code>，最后给这个整体<code>new</code>,上一题如果做对了，这一题也就摆明了送分 ,<code>new function(){alert(&quot;3&quot;)}</code>,结果依然为“3”。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">new new Foo().getName()/*结果为3*/</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>就知识点而言，要掌握 运算符，排序，构造函数返回值，this的指向等知识，灵活运用，即可很快捷很准确地完成该试题。不知道看完之后，你是否也有所想法，在下方留言区告诉我吧。</p>\n","categories":[],"tags":[{"name":"js","path":"api/tags/js.json"},{"name":"面试题","path":"api/tags/面试题.json"}]}