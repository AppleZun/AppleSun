{"title":"前后端数据交互方法","slug":"前后端数据交互方法","date":"2016-09-29T05:21:33.000Z","updated":"2017-06-29T01:14:13.611Z","comments":true,"excerpt":"<h4 id=\"一个网站的正常运行，是需要前端和后台通过对数据库的调用管理进行交互，下面请看数据交互的方法。\"><a href=\"#一个网站的正常运行，是需要前端和后台通过对数据库的调用管理进行交互，下面请看数据交互的方法。\" class=\"headerlink\" title=\"一个网站的正常运行，是需要前端和后台通过对数据库的调用管理进行交互，下面请看数据交互的方法。\"></a>一个网站的正常运行，是需要前端和后台通过对数据库的调用管理进行交互，下面请看数据交互的方法。</h4><h4 id=\"名词解释：\"><a href=\"#名词解释：\" class=\"headerlink\" title=\"名词解释：\"></a>名词解释：</h4><ul>\n<li>前端职能：前端一般是对数据库内容按照页面代码控制进行捡索并展示出来形成页面。</li>\n<li>后台职能：主要是对数据库进行管理，增、删、改。</li>\n<li>JSON：是JS语法的子集。</li>\n<li>JSON语法规则：数据在名称/值对中，数据由逗号分隔，花括号保存对象，方括号保存数组</li>\n</ul>","content":"<h4 id=\"一个网站的正常运行，是需要前端和后台通过对数据库的调用管理进行交互，下面请看数据交互的方法。\"><a href=\"#一个网站的正常运行，是需要前端和后台通过对数据库的调用管理进行交互，下面请看数据交互的方法。\" class=\"headerlink\" title=\"一个网站的正常运行，是需要前端和后台通过对数据库的调用管理进行交互，下面请看数据交互的方法。\"></a>一个网站的正常运行，是需要前端和后台通过对数据库的调用管理进行交互，下面请看数据交互的方法。</h4><h4 id=\"名词解释：\"><a href=\"#名词解释：\" class=\"headerlink\" title=\"名词解释：\"></a>名词解释：</h4><ul>\n<li>前端职能：前端一般是对数据库内容按照页面代码控制进行捡索并展示出来形成页面。</li>\n<li>后台职能：主要是对数据库进行管理，增、删、改。</li>\n<li>JSON：是JS语法的子集。</li>\n<li>JSON语法规则：数据在名称/值对中，数据由逗号分隔，花括号保存对象，方括号保存数组</li>\n</ul>\n<a id=\"more\"></a>\n<hr>\n<h4 id=\"一、HTML赋值\"><a href=\"#一、HTML赋值\" class=\"headerlink\" title=\"一、HTML赋值\"></a>一、HTML赋值</h4><ul>\n<li>输出到 Element 的 (value )或 (data-name)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=&quot;hidden&quot; value=&quot;&lt;?php echo $user_avatar;?&gt;&quot; /&gt;</div><div class=\"line\">&lt;div data-value=&quot;&lt;?php echo $user_avatar;?&gt;&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>渲染结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=&quot;hidden&quot; value=&quot;https://avatars1.githubusercontent.com/u/3949015?v=3&amp;s=40&quot; /&gt;</div><div class=\"line\">&lt;div data-avatar=&quot;https://avatars1.githubusercontent.com/u/3949015?v=3&amp;s=40&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>使用 JS 获取</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(&apos;input&apos;).val();</div><div class=\"line\">// http://jquery.bootcss.com/jQuery.data/</div><div class=\"line\">$(&apos;div&apos;).data(&apos;avatar&apos;);</div></pre></td></tr></table></figure>\n<h5 id=\"优点：不占用全局变量，由-JS-自由获取。\"><a href=\"#优点：不占用全局变量，由-JS-自由获取。\" class=\"headerlink\" title=\"优点：不占用全局变量，由 JS 自由获取。\"></a>优点：不占用全局变量，由 JS 自由获取。</h5><h5 id=\"使用建议：适合传递简单数据，以及多个简单数据与Element绑定关系。\"><a href=\"#使用建议：适合传递简单数据，以及多个简单数据与Element绑定关系。\" class=\"headerlink\" title=\"使用建议：适合传递简单数据，以及多个简单数据与Element绑定关系。\"></a>使用建议：适合传递简单数据，以及多个简单数据与Element绑定关系。</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ul&gt;</div><div class=\"line\">    &lt;li&gt;nimojs&lt;span data-userid=&quot;1&quot; &gt;删除&lt;/span&gt;&lt;/li&gt;</div><div class=\"line\">    &lt;li&gt;nimo22&lt;span data-userid=&quot;2&quot; &gt;删除&lt;/span&gt;&lt;/li&gt;</div><div class=\"line\">    &lt;li&gt;nimo33&lt;span data-userid=&quot;3&quot; &gt;删除&lt;/span&gt;&lt;/li&gt;</div><div class=\"line\">    &lt;li&gt;nimo44&lt;span data-userid=&quot;4&quot; &gt;删除&lt;/span&gt;&lt;/li&gt;</div><div class=\"line\">    &lt;li&gt;nimo55&lt;span data-userid=&quot;5&quot; &gt;删除&lt;/span&gt;&lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">$(&apos;span&apos;).on(&apos;click&apos;,function()&#123;</div><div class=\"line\">    $.post(&apos;/ajax/remove/&apos;,$(this).data(&apos;userid&apos;),function(data)&#123;</div><div class=\"line\">        // ...</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"二、JS赋值\"><a href=\"#二、JS赋值\" class=\"headerlink\" title=\"二、JS赋值\"></a>二、JS赋值</h4><ul>\n<li>将数据填充到<strong><script></strong>的 JavaScript 变量声明中。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\">var user_avatar = &quot;&lt;?php echo $user_avatar;?&gt;&quot;;</div><div class=\"line\">// 渲染结果</div><div class=\"line\">// var user_avatar = &quot;https://avatars1.githubusercontent.com/u/3949015?v=3&amp;s=40&quot;;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>或使用 Smarty 后端模板引擎：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\">var user_avatar = &quot;&#123;$user_avatar&#125;&quot;;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<h5 id=\"优点：传递数据非常方便。前端直接调用-user-avatar-变量使用数据。\"><a href=\"#优点：传递数据非常方便。前端直接调用-user-avatar-变量使用数据。\" class=\"headerlink\" title=\"优点：传递数据非常方便。前端直接调用 user_avatar 变量使用数据。\"></a>优点：传递数据非常方便。前端直接调用 user_avatar 变量使用数据。</h5><h5 id=\"缺点：\"><a href=\"#缺点：\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h5><ol>\n<li>为了传递一个字符串数据占用了全局变量 <strong>user_avatar</strong>，</li>\n<li>当有很多数据需要传输时则会占用很多全局变量。</li>\n<li>如果返回数据存在换行将会导致JS报错。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 渲染结果有换行符</div><div class=\"line\">var user_id = &apos;&apos;</div><div class=\"line\"></div><div class=\"line\">https://avatars1.githubusercontent.com/u/3949015?v=3&amp;s=40&quot;;</div><div class=\"line\">// Uncaught SyntaxError: Unexpected token ILLEGAL</div></pre></td></tr></table></figure>\n<h5 id=\"优化：可以通过指向的某一个变量存放所有后端返回的内容，最小程度占用全局变量。例：\"><a href=\"#优化：可以通过指向的某一个变量存放所有后端返回的内容，最小程度占用全局变量。例：\" class=\"headerlink\" title=\"优化：可以通过指向的某一个变量存放所有后端返回的内容，最小程度占用全局变量。例：\"></a>优化：可以通过指向的某一个变量存放所有后端返回的内容，最小程度占用全局变量。例：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">// PHP 代码</div><div class=\"line\">var SERVER_DATA = &#123;</div><div class=\"line\">    username: &#123;$username&#125;,</div><div class=\"line\">    userid: &#123;$userid&#125;,</div><div class=\"line\">    title: &#123;$title&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">// 渲染结果</div><div class=\"line\">var SERVER_DATA = &#123;</div><div class=\"line\">    username: &quot;NimoChu&quot;,</div><div class=\"line\">    userid: 1,</div><div class=\"line\">    title: &apos;F2E&apos;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"使用建议：\"><a href=\"#使用建议：\" class=\"headerlink\" title=\"使用建议：\"></a>使用建议：</h5><ol>\n<li>需要最快速度传递数据给JS并十分确定此数据稳定时，使用此方式。</li>\n<li>数据格式复杂的建议使用script填充JSON 或AJAX获取JSON 方法。</li>\n</ol>\n<hr>\n<h4 id=\"三、script填充JSON\"><a href=\"#三、script填充JSON\" class=\"headerlink\" title=\"三、script填充JSON\"></a>三、script填充JSON</h4><ul>\n<li>填充JSON数据到<strong><script></strong>标签中，前端通过DOM获取JSON字符串并解析成对象。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- PHP 代码 --&gt;</div><div class=\"line\">&lt;script type=&quot;text/json&quot; id=&quot;data&quot;&gt;&lt;?php echo json_encode($data) ?&gt;&lt;/script&gt;</div><div class=\"line\">&lt;!-- 页面渲染结果 --&gt;</div><div class=\"line\">&lt;script type=&quot;text/json&quot; id=&quot;data&quot;&gt;&#123;&quot;username&quot;:&quot;nimojs&quot;,&quot;userid&quot;:1&#125;&lt;/script&gt;</div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">    var data = JSON.parse($(&apos;#data&apos;).html());</div><div class=\"line\">//&#123;username:&quot;nimojs&quot;,userid:1&#125;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<h5 id=\"优点：页面加载完成后就可以获取到数据。不占用全局变量，可传递大量数据集合。\"><a href=\"#优点：页面加载完成后就可以获取到数据。不占用全局变量，可传递大量数据集合。\" class=\"headerlink\" title=\"优点：页面加载完成后就可以获取到数据。不占用全局变量，可传递大量数据集合。\"></a>优点：页面加载完成后就可以获取到数据。不占用全局变量，可传递大量数据集合。</h5><h5 id=\"缺点：-1\"><a href=\"#缺点：-1\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h5><ol>\n<li><p>数据量特别大时会导致页面初次加载变慢。</p>\n</li>\n<li><p>变慢并不只是文件大小导致的，也因为服务器查询数据并返回合集是需要时间</p>\n</li>\n<li><p>可使用AJAX获取JSON完成按需加载和加载等待。</p>\n<h5 id=\"使用建议：-1\"><a href=\"#使用建议：-1\" class=\"headerlink\" title=\"使用建议：\"></a>使用建议：</h5></li>\n<li><p>适合传递在DOM加载完成时就需要用到的大量数据集合。</p>\n</li>\n<li><p>例如：前端控制页面渲染，后端将JSON数据源填充到<strong><script></strong></p>\n</li>\n<li><p>再由前端使用 JavaScript模板引擎进行页面渲染。</p>\n</li>\n</ol>\n<hr>\n<h4 id=\"四、AJAX获取JSON\"><a href=\"#四、AJAX获取JSON\" class=\"headerlink\" title=\"四、AJAX获取JSON\"></a>四、AJAX获取JSON</h4><ul>\n<li>使用 AJAX 获取JSON数据</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;span id=&quot;showdata&quot;&gt;查看资料&lt;/span&gt;</div><div class=\"line\">&lt;div style=&quot;display:none;&quot; id=&quot;box&quot;&gt;</div><div class=\"line\">    &lt;h2&gt;用户信息&lt;/h2&gt;</div><div class=\"line\">    &lt;p id=&quot;info&quot;&gt;&lt;img src=&quot;loading.gif&quot; /&gt;&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(&apos;#showdata&apos;).on(&apos;click&apos;,function()&#123;</div><div class=\"line\">    $(&apos;#box&apos;).show();</div><div class=\"line\">    $.getJSON(&apos;/ajax/userdata/&apos;,function(oData)&#123;</div><div class=\"line\">        // oData = &#123;&quot;username&quot;:&quot;nimojs&quot;,&quot;userid&quot;:1&#125;</div><div class=\"line\">       $(&apos;#info&apos;).html(&apos;用户名：&apos; + oData.username + &apos;</div><div class=\"line\">用户ID：&apos; + oData.userid);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h6 id=\"这是一个通过AJAX-获取用户资料的示例。流程如下：\"><a href=\"#这是一个通过AJAX-获取用户资料的示例。流程如下：\" class=\"headerlink\" title=\"这是一个通过AJAX 获取用户资料的示例。流程如下：\"></a>这是一个通过AJAX 获取用户资料的示例。流程如下：</h6><ol>\n<li>页面上只显示查看资料</li>\n<li>用户点击查看资料</li>\n<li>显示用户信息和 loading 图片</li>\n<li>向服务器发送获取用户信息的AJAX请求</li>\n<li>服务器返回JSON字符串，$.getJSON 自动将返回的 JSON字符串转换为对象</li>\n<li>填充内容到 <strong><p id=”info”></strong></li>\n</ol>\n<h5 id=\"优点：\"><a href=\"#优点：\" class=\"headerlink\" title=\"优点：\"></a>优点：</h5><ol>\n<li>不占用全局变量和 DOM 节点，可以自由控制获取数据的触发条件。</li>\n<li>页面加载完成时、用户点击查看资料时或用户点击某个按钮时。</li>\n<li>当开始获取数据时可使用 loading 图片占位提示用户数据正在读取。防止页面加载所有数据导致的页面加载缓慢。</li>\n</ol>\n<h5 id=\"缺点：会产生额外的HTTP请求。不能在DOM加载完成以后立即获取，需要发送请求-接收响应。\"><a href=\"#缺点：会产生额外的HTTP请求。不能在DOM加载完成以后立即获取，需要发送请求-接收响应。\" class=\"headerlink\" title=\"缺点：会产生额外的HTTP请求。不能在DOM加载完成以后立即获取，需要发送请求-接收响应。\"></a>缺点：会产生额外的HTTP请求。不能在DOM加载完成以后立即获取，需要发送请求-接收响应。</h5><h5 id=\"使用建议：-2\"><a href=\"#使用建议：-2\" class=\"headerlink\" title=\"使用建议：\"></a>使用建议：</h5><ol>\n<li>适合加载非主要信息、设定触发条件（用户点击查看资料时），并提供友好的数据读取等待提示。</li>\n</ol>\n<hr>\n<h4 id=\"五、WebSocket实时传输数据\"><a href=\"#五、WebSocket实时传输数据\" class=\"headerlink\" title=\"五、WebSocket实时传输数据\"></a>五、WebSocket实时传输数据</h4><ul>\n<li><p>如果将AJAX请求和响应比喻成给服务器发短信和等待服务器回复短信，</p>\n</li>\n<li><p>而 WebSocket 就如同和服务器打电话。</p>\n</li>\n<li><p>参考资料如下：</p>\n<p><a href=\"https://www.web-tinker.com/article/20372.html\">Ajax vs WebSocket</a><br>等等</p>\n</li>\n</ul>\n</script></strong></li></ul>","categories":[],"tags":[{"name":"php","path":"api/tags/php.json"}]}