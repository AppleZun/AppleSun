{"title":"JS的变量提升","slug":"JS的变量提升","date":"2017-01-04T05:26:49.000Z","updated":"2017-06-29T01:14:13.564Z","comments":true,"excerpt":"<p>很多面试题喜欢在函数执行这一块下功夫，作为 开发者如果不能很好滴 掌握js的执行原理，在面试过程中肯定会被秀的体无完肤，基于此我去找了变量提升相关内容，一起学习。</p>","content":"<p>很多面试题喜欢在函数执行这一块下功夫，作为 开发者如果不能很好滴 掌握js的执行原理，在面试过程中肯定会被秀的体无完肤，基于此我去找了变量提升相关内容，一起学习。</p>\n<a id=\"more\"></a>\n<h2 id=\"JavaScript代码的运行规则\"><a href=\"#JavaScript代码的运行规则\" class=\"headerlink\" title=\"JavaScript代码的运行规则\"></a>JavaScript代码的运行规则</h2><p>在JavaScript代码运行之前其实是有一个<em>编译阶段</em>的。编译之后才是<strong>从上到下，一行一行解释执行</strong>。这样一来也给初学者造成很大的误解。初学者会觉得JavaScript的代码是从上到下，一行一行的解释执行的。按这样的思路，在有些情况下就会造成惨案：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">name = &quot;AppleSun&quot;;</div><div class=\"line\">var name;</div><div class=\"line\">console.log(name);</div></pre></td></tr></table></figure>\n<p>按照代码从上到下一行一行解释执行的说法，有些同学可能会觉得<code>console.log(name)</code>输出的值是<code>undefined</code>。那是因为<code>name = &quot;AppleSun&quot;</code>在<code>var name</code>之前，变量<code>name</code>被重新定义了，而且没有给其赋值，所以认为此时<code>name</code>的值是<code>undefined</code>。输出的也应该是undefined。但事实上输出的值是<code>&quot;AppleSun&quot;</code>。下图是Chrome浏览器调试器下的输出结果：<br><img src=\"http://7xjdah.com1.z0.glb.clouddn.com/pic2016071901.png\" alt=\"img\"></p>\n<p><strong>在看一段代码</strong>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">console.log(name);</div><div class=\"line\">var name = &quot;AppleSun&quot;;</div></pre></td></tr></table></figure>\n<p>当初我就以为它输出的结果是<code>Uncaught ReferenceError: name is not defined(…)</code>。因为变量<code>name</code>在没有声明的情况下就被使用了。而事实上呢，并如如此，它输出的结果是<code>undefined</code>。如下图所示：<br><img src=\"http://7xjdah.com1.z0.glb.clouddn.com/pic2016071902.png\" alt=\"img\"></p>\n<p>为什么会这样呢？因为JavaScript代码运行时，它把变量和函数的声明提升至作用域的顶端。而这个阶段就发生了变量提升。同时JavaScript在编译阶段的工作之一就是将变量与其作用域进行关联。那么要彻底的理解JavaScript声明提升，需要对JavaScript的变量作用域有一定的了解。</p>\n<h2 id=\"JavaScript变量作用域\"><a href=\"#JavaScript变量作用域\" class=\"headerlink\" title=\"JavaScript变量作用域\"></a>JavaScript变量作用域</h2><p>对于JavaScript的初学者来说，变量作用域是最令人感到困惑的一部分。有关于JavaScript中变量的作用域，本文不做介绍，因为要说清楚它，需要大幅篇幅，而且对于我这样的新手也道不清说不明。拿张图向大家简单的展示一下：<br><img src=\"http://7xjdah.com1.z0.glb.clouddn.com/pic2016071903.png\" alt=\"img\"></p>\n<h4 id=\"在JavaScript中，变量有4种基本方式进入作用域：\"><a href=\"#在JavaScript中，变量有4种基本方式进入作用域：\" class=\"headerlink\" title=\"在JavaScript中，变量有4种基本方式进入作用域：\"></a>在JavaScript中，变量有4种基本方式进入作用域：</h4><ul>\n<li>语言自身定义(Language-defined)：所有的作用域默认都会包含<code>this</code>和<code>arguments</code></li>\n<li>函数形参(Formal parameters)：函数有名字的形参会进入到函数体的作用域中</li>\n<li>函数声明(Function decalrations)：通过<code>function foo() {...}</code>方式实现函数声明</li>\n<li>变量声明(Variable declarations)：通过<code>var foo</code>;形式声明变量，当然在ES6中还增加了<code>let</code>和<code>const</code>声明变量</li>\n</ul>\n<h4 id=\"有关于JavaScript作用域更多的介绍可以阅读下面这些文章：\"><a href=\"#有关于JavaScript作用域更多的介绍可以阅读下面这些文章：\" class=\"headerlink\" title=\"有关于JavaScript作用域更多的介绍可以阅读下面这些文章：\"></a>有关于JavaScript作用域更多的介绍可以阅读下面这些文章：</h4><ul>\n<li><a href=\"http://www.w3cplus.com/javascript/the-basics-of-variable-scope-in-javascript.html\" target=\"_blank\" rel=\"external\">JavaScript学习笔记： 局部变量和全局变量</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000002960647\" target=\"_blank\" rel=\"external\">理解 Javascript 中变量的作用域</a></li>\n<li><a href=\"http://www.w3cplus.com/javascript/variables-and-scoping-in-es6.html\" target=\"_blank\" rel=\"external\">ES6中的变量和作用域</a></li>\n<li><a href=\"http://www.cnblogs.com/rainman/archive/2009/04/28/1445687.html\" target=\"_blank\" rel=\"external\">深入理解JavaScript的变量作用域</a></li>\n</ul>\n<p>可能你跟我一样，对变量作用域并没有理解透彻，但我们不能因为这个原因而不继续。</p>\n<h2 id=\"JavaScript变量提升\"><a href=\"#JavaScript变量提升\" class=\"headerlink\" title=\"JavaScript变量提升\"></a>JavaScript变量提升</h2><p>在JavaScript中，变量的声明可以放在它的使用之后。换句话说，变量可以先使用后声明。这主要是因为JavaScript的提升(hoisting)机制在作怪。简单点说，提升(hoisting)是JavaScript中默认就具有的一种机制，它将当用作用域内的所有声明都提升到最顶部。如此一来，可以把变量提升归纳为：</p>\n<p><strong>JavaScript引擎的工作方式是，先解析代码，获取所有被声明的变量，然后再一行一行地运行。这造成的结果，就是所有的变量的声明语句，都会被提升到代码的头部，这就叫做变量提升（hoisting）。</strong></p>\n<p>为了理解上面的含义，我们来看一个简单的示例。下面的代码中定义了一个函数<code>foo()</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo () &#123;</div><div class=\"line\">    var name = &quot;AWebMan&quot;;</div><div class=\"line\">    var address = &quot;http://www.awebman.cn&quot;;</div><div class=\"line\">    var age = 1;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其实他会变成这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo () &#123;</div><div class=\"line\">    var name,address,age;</div><div class=\"line\">    name = &quot;AWebMan&quot;;</div><div class=\"line\">    address = &quot;http://www.awebman.cn&quot;;</div><div class=\"line\">    age = 1;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"JavaScript的提升将会影响一个变量的生命周期，JavaScript中的一个变量，其生命周期主要包含三个阶段：\"><a href=\"#JavaScript的提升将会影响一个变量的生命周期，JavaScript中的一个变量，其生命周期主要包含三个阶段：\" class=\"headerlink\" title=\"JavaScript的提升将会影响一个变量的生命周期，JavaScript中的一个变量，其生命周期主要包含三个阶段：\"></a>JavaScript的提升将会影响一个变量的生命周期，JavaScript中的一个变量，其生命周期主要包含三个阶段：</h4><ul>\n<li>声明变量：创建一个新变量，如<code>var name</code>;</li>\n<li>变量初始化：给变量初始化一个值，如<code>name = &quot;AppleSun&quot;</code>;</li>\n<li>变量使用： 使用变量的值，如<code>console.log(name)</code>;</li>\n</ul>\n<p>知道这个概念之后，再回过头来看文章开头的示例代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">name = &quot;AppleSun&quot;;</div><div class=\"line\">var name;</div><div class=\"line\">console.log(name);</div></pre></td></tr></table></figure>\n<p>在编写代码时应该这样做处理：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var name;    //代码编译阶段</div><div class=\"line\">name = &quot;AppleSun&quot;;  //代码运行阶段</div><div class=\"line\">console.log(name);  //代码运行阶段</div></pre></td></tr></table></figure>\n<p>所以这段代码最终输出的结果将会是<code>AppleSun</code>。</p>\n<p><strong>第二个示例代码</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">console.log(name);</div><div class=\"line\">var name = &quot;AppleSun&quot;;</div></pre></td></tr></table></figure>\n<p>我们应该这样处理：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var name;    //代码编译阶段</div><div class=\"line\">console.log(name);  // 代码运行阶段</div><div class=\"line\">name = &quot;AppleSun&quot;;  // 代码运行阶段</div></pre></td></tr></table></figure>\n<p>所以代码最终结果是<code>undefined</code>.</p>\n<h2 id=\"理解变量提升\"><a href=\"#理解变量提升\" class=\"headerlink\" title=\"理解变量提升\"></a>理解变量提升</h2><p>变量提升就是把变量提升到函数的顶部。需要特别说明的是：变量提升只是提升变量的声明，并不会把赋值也提升上来。</p>\n<p>其实前面的示例已经说明了这一切，咱们重新来看看这个<code>foo()</code>函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo () &#123;</div><div class=\"line\">    var name = &quot;AppleSun&quot;;</div><div class=\"line\">    var address = &quot;http://www.awebman.cn&quot;;</div><div class=\"line\">    var age = 1;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>实际上foo()函数是这样子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var name,address,age;</div><div class=\"line\">name = &quot;AppleSun&quot;;</div><div class=\"line\">address = &quot;http://www.awebman.cn&quot;;</div><div class=\"line\">age = 1;</div></pre></td></tr></table></figure>\n<p>这时候酒吧变量提升了。</p>\n<h5 id=\"上面的事例比较简单，咱们来一个稍微复杂的示例：\"><a href=\"#上面的事例比较简单，咱们来一个稍微复杂的示例：\" class=\"headerlink\" title=\"上面的事例比较简单，咱们来一个稍微复杂的示例：\"></a>上面的事例比较简单，咱们来一个稍微复杂的示例：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var foo = 1;</div><div class=\"line\">function bar () &#123;</div><div class=\"line\">    if (!foo) &#123;</div><div class=\"line\">        var foo = 10;</div><div class=\"line\">    &#125;</div><div class=\"line\">    console.log(foo);</div><div class=\"line\">&#125;</div><div class=\"line\">bar();</div><div class=\"line\">var foo = 1;</div></pre></td></tr></table></figure>\n<p>答案是<code>10</code>。你一定觉得非常奇怪，<code>foo</code>等于<code>1</code>,if条件<code>!foo</code>应该是<code>false</code>，也就是说if代码块的代码是不会被执行。返回的值应该是<code>undefined</code>呀，怎么就变成<code>10</code>了呢？实际上，正如前面所说，变量<code>foo</code>被提升到了<code>bar()</code>函数最顶部，那么程序就变成这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">function bar () &#123;</div><div class=\"line\">    console.log(foo); // =&gt; undefined</div><div class=\"line\">    if (!foo) &#123;</div><div class=\"line\">        var foo = 10;</div><div class=\"line\">        console.log(foo); // =&gt; 10</div><div class=\"line\">    &#125;</div><div class=\"line\">    console.log(foo); // =&gt; 10</div><div class=\"line\">&#125;</div><div class=\"line\">bar();</div></pre></td></tr></table></figure>\n<p><code>bar()</code>函数运行后，输出的值是<code>undefined</code> <code>10</code> <code>10</code>,如下图所示：<br><img src=\"http://7xjdah.com1.z0.glb.clouddn.com/pic2016071904.png\" alt=\"img\"></p>\n<p>说明当在函数内使用var声明变量的时候，这个变量的声明被提升到了bar()函数的最顶部（最开始处），所以这个例子等同于：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var foo = 1;</div><div class=\"line\">function bar () &#123;</div><div class=\"line\">    var foo; // 定义局部变量foo</div><div class=\"line\">    if (!foo) &#123; // foo是undefined (false),那么!foo就是true，所以会执行if语句块</div><div class=\"line\">        foo = 10;</div><div class=\"line\">    &#125;</div><div class=\"line\">    console.log(foo);</div><div class=\"line\">&#125;</div><div class=\"line\">bar(); // =&gt; 输出的结果是10</div></pre></td></tr></table></figure>\n<p>这样一来就明白了，结果为啥会是10了吧。</p>\n<p>接着往下看，如果把<code>bar()</code>函数内的<code>var foo = 10</code>;换成<code>foo = 10</code>，其结果又将是如何呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">function bar()&#123;</div><div class=\"line\">    if(!foo)&#123;</div><div class=\"line\">        foo=10;</div><div class=\"line\">    &#125;</div><div class=\"line\">    console.log(foo);</div><div class=\"line\">&#125;</div><div class=\"line\">bar();</div><div class=\"line\">var foo=1;</div></pre></td></tr></table></figure>\n<p>其上面的代码变成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var foo=1;</div><div class=\"line\">function bar()&#123;</div><div class=\"line\">    if(!foo)&#123;</div><div class=\"line\">        foo=10;</div><div class=\"line\">    &#125;</div><div class=\"line\">    console.log(foo);</div><div class=\"line\">&#125;</div><div class=\"line\">bar(); // =&gt; 1</div></pre></td></tr></table></figure>\n<p>因为<code>bar()</code>中的变量<code>foo</code>没有使用<code>var</code>声明，变量不再提升。所以<code>(!foo)</code>会到函数外寻找定义的合局变量<code>foo</code>，结果是<code>1</code>，那<code>!foo</code>返回的值是<code>false</code>，也就不会执行if语句块内的代码。最终得到的结果是<code>1</code>。如果这个时候没有定义全局变量<code>foo</code>，就会报错。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">function bar()&#123;</div><div class=\"line\">    if(!foo)&#123;</div><div class=\"line\">        foo=10;</div><div class=\"line\">    &#125;</div><div class=\"line\">    console.log(foo);</div><div class=\"line\">&#125;</div><div class=\"line\">bar(); // =&gt; Uncaught ReferenceError: foo is not defined(…)</div></pre></td></tr></table></figure>\n<p>如下图所示：<br><img src=\"http://7xjdah.com1.z0.glb.clouddn.com/pic2016071905.png\" alt=\"img\"><br>也就是说，只有在有var声明的变量才会被提升到函数最顶部。</p>\n<h2 id=\"函数声明提升\"><a href=\"#函数声明提升\" class=\"headerlink\" title=\"函数声明提升\"></a>函数声明提升</h2><p>函数在声明时也会像变量一样被提升。不同的是，函数表达式不会被提升。</p>\n<h2 id=\"函数声明\"><a href=\"#函数声明\" class=\"headerlink\" title=\"函数声明\"></a>函数声明</h2><p>函数声明提升</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">foo();</div><div class=\"line\">function foo() &#123;</div><div class=\"line\">    console.log(n);</div><div class=\"line\">    var n = 2;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>实际上上面的代码将会按下面的形式执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo () &#123;</div><div class=\"line\">    var n;</div><div class=\"line\">    console.log(n);</div><div class=\"line\">    n = 2;</div><div class=\"line\">&#125;</div><div class=\"line\">foo(); // =&gt; undefined</div></pre></td></tr></table></figure>\n<p>函数foo()的作用域内的变量n提升到了作用域顶部，全局作用域里的foo()函数声明民会被提前到所处的作用域顶部，即全局作用域的顶部。但是函数表达式的话只有变量被声明，但是赋值给变量的函数不会被提升。</p>\n<h2 id=\"函数表达式\"><a href=\"#函数表达式\" class=\"headerlink\" title=\"函数表达式\"></a>函数表达式</h2><p>函数表达式不会被提长：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">foo();</div><div class=\"line\">var foo = function bar () &#123;</div><div class=\"line\">    console.log(foo);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>函数表达式的提升类似于变量的提升：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var foo;</div><div class=\"line\">foo(); // =&gt; Uncaught TypeError: foo is not a function(…)</div><div class=\"line\">foo = function bar () &#123;</div><div class=\"line\">    console.log(foo);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样会引发TypeError异常，因为当时的foo并没有赋值，对undefined进行函数调用会导致非法操作抛出异常。</p>\n<h2 id=\"函数优先\"><a href=\"#函数优先\" class=\"headerlink\" title=\"函数优先\"></a>函数优先</h2><p>函数会首先被提升，然后跟着才是变量。也就是说同时存在函数声明与函数表达式时，函数声明会优先于函数表达式提升。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">foo();</div><div class=\"line\">function foo() &#123;</div><div class=\"line\">  console.log(&apos;1&apos;);</div><div class=\"line\">&#125;</div><div class=\"line\">var foo = function () &#123;</div><div class=\"line\">  console.log(&apos;2&apos;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的代码将会被理解成下面的形式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo() &#123;</div><div class=\"line\">  console.log(&apos;1&apos;);</div><div class=\"line\">&#125;</div><div class=\"line\">var foo;</div><div class=\"line\">foo(); // 1</div><div class=\"line\">foo = function () &#123;</div><div class=\"line\">    console.log(&apos;2&apos;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>所以实际上的输出是 1，因为函数表达式的赋值操作会在原来的位置，而声明操作则是提升到作用域顶部，但是优先级低于函数声明。</p>\n<p>重复声明同名变量在 JavaScript 非严格模式中将会被忽略，所以实际上函数表达式的位置并没有改变。</p>\n<h4 id=\"通过上面的介绍之后，简单的总结一下：\"><a href=\"#通过上面的介绍之后，简单的总结一下：\" class=\"headerlink\" title=\"通过上面的介绍之后，简单的总结一下：\"></a>通过上面的介绍之后，简单的总结一下：</h4><ul>\n<li>使用var声明的变量（包括函数）其声明会被提升到方法体最顶部，而赋值不会被提升；</li>\n<li>未使用var声明的变量，不会被提升；</li>\n<li>使用函数表达式function bar(){}定义的函数会函数声明连带函数体提升到方法体最顶部；</li>\n<li>注意JavaScript中的作用域问题，JavaScript中没有块作用域(在ES6中改变了这一格局，使用let和const声明的变量，作用于块用域)</li>\n</ul>\n<p>事实上，变量提升在不同方面的影响也不同：</p>\n<ul>\n<li>变量声明: 使用var, let或const关键字</li>\n<li>函数声明: 使用function () {…}语法</li>\n<li>类声明: 使用class关键字</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>看到这里，是不是有点晕了，说真的，我自己都晕了。不过理解清楚下面这段话，你理解JavaScript中的变量提升会有很大的帮助：</p>\n<p><strong>如果变量在函数体内声明，它的作用域是函数作用域。否则，它就是全局作用域。变量将会在执行进入作用域时被创建。块不会定义新的作用域，只有函数声明和程序才可以。变量在创建的时候会被初始化为undefined。如果变量声明语句带有赋值操作，则赋值操作只有在被执行的时候才会发生，而不是创建的时候。如果文章中有不对之处，或者你有更好的意见欢迎在下面的评论中与我们分享。</strong></p>\n<hr>\n<p>本博文已得到作者授权，如需转载，请联系W3cplus 大漠本人<br><a href=\"http://www.w3cplus.com/javascript/javascript-hoisting-in-details.html\" target=\"_blank\" rel=\"external\">如需转载出处</a></p>\n","categories":[],"tags":[{"name":"js","path":"api/tags/js.json"},{"name":"面试题","path":"api/tags/面试题.json"}]}