{"title":"FLEX布局模式的理解","slug":"FLEX布局模式的理解","date":"2016-11-22T05:07:56.000Z","updated":"2017-06-29T01:14:13.549Z","comments":true,"excerpt":"<p>Flexbox，一种CSS3的布局模式，也叫做弹性盒子模型，用来为盒装模型提供最大的灵活性。首先举一个栗子，之前我们是这样实现一个div盒子水平垂直居中的。在知道对象高宽的情况下，对居中元素绝对百分比定位，然后通过margin偏移的方式来实现。</p>","content":"<p>Flexbox，一种CSS3的布局模式，也叫做弹性盒子模型，用来为盒装模型提供最大的灵活性。首先举一个栗子，之前我们是这样实现一个div盒子水平垂直居中的。在知道对象高宽的情况下，对居中元素绝对百分比定位，然后通过margin偏移的方式来实现。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"> &lt; style&gt;</div><div class=\"line\">    .container&#123;</div><div class=\"line\">        width: 600px;</div><div class=\"line\">        height: 400px;</div><div class=\"line\">        border: 1px solid #000;</div><div class=\"line\">        position: relative;</div><div class=\"line\">    &#125;</div><div class=\"line\">    .box&#123;</div><div class=\"line\">        width: 200px;</div><div class=\"line\">        height: 100px;</div><div class=\"line\">        border: 1px solid #000;</div><div class=\"line\">        position: absolute;</div><div class=\"line\">        left: 50%;</div><div class=\"line\">        top: 50%;</div><div class=\"line\">        margin-left: -100px;</div><div class=\"line\">        margin-top:-50px;</div><div class=\"line\">    &#125;</div><div class=\"line\">&lt;/style&gt;</div><div class=\"line\">&lt; div class=&quot;container&quot;&gt;</div><div class=\"line\">    &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>假如使用了flex后，实现起来就简单了，而且不需要自己去算，也不需要绝对定位，只需要通过对伸缩容器定义两个属性，justify-content定义伸缩项目沿着主轴线的对齐方式为center， align-items定义伸缩项目在侧轴（垂直于主轴）的对齐方式为center，具体如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt; style&gt;</div><div class=\"line\">\t.container&#123;</div><div class=\"line\">\t    width: 600px;</div><div class=\"line\">\t    height: 400px;</div><div class=\"line\">\t    border: 1px solid #000;</div><div class=\"line\">\t    display: flex;</div><div class=\"line\">\t    justify-content:center;</div><div class=\"line\">\t    align-items:center;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t.box&#123;</div><div class=\"line\">\t    width: 200px;  //宽度可以为任意</div><div class=\"line\">\t    height: 100px; //高度可以为任意</div><div class=\"line\">\t    border: 1px solid #000;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&lt;/style&gt;</div><div class=\"line\">&lt; div class=&quot;container&quot;&gt;</div><div class=\"line\">    &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>其实Flexbox的优秀特性并不是这一些，首先来一张它的属性图吧~</p>\n<p><img src=\"http://7xjdah.com1.z0.glb.clouddn.com/pic2016062302.png\" alt=\"img\"></p>\n<p>首先我们来分析下这一张图，从第一个子节点可以看到Flexbox由Flex容器和Flex项目组成，容器即父元素，项目即子元素。他们之间的一些关系可以这样来表示：</p>\n<p><img src=\"http://7xjdah.com1.z0.glb.clouddn.com/pic2016062303.png\" alt=\"img\"></p>\n<p>这张图可以在接下来的属性分析中用到。</p>\n<h3 id=\"Flex容器\"><a href=\"#Flex容器\" class=\"headerlink\" title=\"Flex容器\"></a>Flex容器</h3><h5 id=\"display-flex\"><a href=\"#display-flex\" class=\"headerlink\" title=\"display:flex\"></a>display:flex</h5><p>当我们使用flexbox布局时候，需要先给父容器的display值定位flex（块级）或者inline-flex（行内级）。</p>\n<p>当使用了这个值以后，伸缩容器会为内容建立新的伸缩格式化上下文（FFC），它的上下文展示效果和BFC根元素相同（BFC特性：浮动不会闯入伸缩容器，且伸缩容器的边界不会与其内容边界叠加）。</p>\n<p>伸缩容器不是块容器，因此有些设计用来控制块布局的属性，在伸缩布局中不适用，特别是多栏（column)，float，clear，vertical-align这些属性。</p>\n<h5 id=\"flex-direction\"><a href=\"#flex-direction\" class=\"headerlink\" title=\"flex-direction\"></a>flex-direction</h5><p>[flex-direction]属性用来控制上图中伸缩容器中主轴的方向，同时也决定了伸缩项目的方向。</p>\n<p>flex-direction:row;也是默认值，即主轴的方向和正常的方向一样，从左到右排列。<br>flex-direction:row-reverse;和row的方向相反，从右到左排列。<br>flex-direction:column;从上到下排列。<br>flex-direction:column-reverse;从下到上排列。 以上只针对ltr书写方式，对于rtl正好相反了。</p>\n<p>网页展示效果如下：<br><img src=\"http://7xjdah.com1.z0.glb.clouddn.com/pic2016062304.png\" alt=\"img\"></p>\n<h5 id=\"flex-warp\"><a href=\"#flex-warp\" class=\"headerlink\" title=\"flex-warp\"></a>flex-warp</h5><p>[flex-wrap]属性控制伸缩容器是单行还是多行，也决定了侧轴方向（新的一行的堆放方向）。</p>\n<ul>\n<li>flex-wrap:nowrap;伸缩容器单行显示，默认值；</li>\n<li>flex-wrap:wrap;伸缩容器多行显示；伸缩项目每一行的排列顺序由上到下依次。</li>\n<li>flex-wrap:wrap-reverse;伸缩容器多行显示，但是伸缩项目每一行的排列顺序由下到上依次排列。</li>\n</ul>\n<p>网页效果见图；<br><img src=\"http://7xjdah.com1.z0.glb.clouddn.com/pic2016062305.png\" alt=\"img\"></p>\n<h5 id=\"flex-flow\"><a href=\"#flex-flow\" class=\"headerlink\" title=\"flex-flow\"></a>flex-flow</h5><p>[flex-flow]属性为flex-direction（主轴方向）和flex-wrap（侧轴方向）的缩写，两个属性决定了伸缩容器的主轴与侧轴。</p>\n<ul>\n<li>flex-flow:[flex-direction][flex-wrap];默认值为row nowrap；</li>\n</ul>\n<p>举两个栗子：</p>\n<ul>\n<li>flex-flow:row;也是默认值；主轴是行内方向，单行显示，不换行；</li>\n<li>flex-flow:row-reverse wrap;主轴和行内方向相反，从右到左，项目每一行由上到下排列（侧轴）。</li>\n</ul>\n<p>网页效果如下：<br><img src=\"http://7xjdah.com1.z0.glb.clouddn.com/pic2016062306.png\" alt=\"img\"></p>\n<p>这里大家可以多自己去试试不同的组合。</p>\n<h5 id=\"justify-content\"><a href=\"#justify-content\" class=\"headerlink\" title=\"justify-content\"></a>justify-content</h5><p>[justify-content]用于定义伸缩项目在主轴上面的的对齐方式，当一行上的所有伸缩项目都不能伸缩或可伸缩但是已经达到其最大长度时，这一属性才会对多余的空间进行分配。当项目溢出某一行时，这一属性也会在项目的对齐上施加一些控制。</p>\n<ul>\n<li>justify-content:flex-start;伸缩项目向主轴的起始位置开始对齐，后面的每元素紧挨着前一个元素对齐。</li>\n<li>justify-content:flex-end;伸缩项目向主轴的结束位置对齐，前面的每一个元素紧挨着后一个元素对齐。</li>\n<li>justify-content:center;伸缩项目相互对齐并在主轴上面处于居中，并且第一个元素到主轴起点的距离等于最后一个元素到主轴终点的位置。以上3中都是“捆绑”在一个分别靠左、靠右、居中对齐。</li>\n<li>justify-content:space-between;伸缩项目平均的分配在主轴上面，并且第一个元素和主轴的起点紧挨，最后一个元素和主轴上终点紧挨，中间剩下的伸缩项目在确保两两间隔相等的情况下进行平分。</li>\n<li>justify-content:space-around;伸缩项目平均的分布在主轴上面，并且第一个元素到主轴起点距离和最后一个元素到主轴终点的距离相等，且等于中间元素两两的间距的一半。完美的平均分配，这个布局在阿里系中很常见。</li>\n</ul>\n<p>还是看demo理解起来快一点：</p>\n<p><img src=\"http://7xjdah.com1.z0.glb.clouddn.com/pic2016062307.png\" alt=\"img\"></p>\n<h5 id=\"align-items\"><a href=\"#align-items\" class=\"headerlink\" title=\"align-items\"></a>align-items</h5><p>[align-items]用来定义伸缩项目在侧轴的对齐方式，这类似于[justify-content]属性，但是是另一个方向。（flex-directon和flex-wrap是一对，justify-content和align-items是一对，前者分别定义主轴和侧轴的方向，后者分别定义主轴和侧轴中项目的对齐方式）。</p>\n<ul>\n<li>align-items:flex-start;伸缩项目在侧轴起点边的外边距紧靠住该行在侧轴起点的边。</li>\n<li>align-items:flex-end;伸缩项目在侧轴终点边的外边距靠住该行在侧轴终点的边。</li>\n<li>align-items:center;伸缩项目的外边距在侧轴上居中放置。</li>\n<li>align-items:baseline;如果伸缩项目的行内轴与侧轴为同一条，则该值与[flex-start]等效。 其它情况下，该值将参与基线对齐。</li>\n<li>align-items:stretch;伸缩项目拉伸填充整个伸缩容器。此值会使项目的外边距盒的尺寸在遵照「min/max-width/height」属性的限制下尽可能接近所在行的尺寸。</li>\n</ul>\n<p>下面demo只展示center和stretch的栗子，其他几个可以参考<code>flex-start</code>和<code>flex-end</code>那样。</p>\n<p><img src=\"http://7xjdah.com1.z0.glb.clouddn.com/pic2016062308.png\" alt=\"img\"></p>\n<h5 id=\"align-content\"><a href=\"#align-content\" class=\"headerlink\" title=\"align-content\"></a>align-content</h5><p>[align-content]属性可以用来调准伸缩行在伸缩容器里的对齐方式，这与调准伸缩项目在主轴上对齐方式的[justify-content]属性类似。只不过这里元素是以一行为单位。请注意本属性在只有一行的伸缩容器上没有效果。当使用flex-wrap:wrap时候多行效果就出来了。</p>\n<ul>\n<li>align-content: <code>flex-start</code> || <code>flex-end</code> || <code>center</code> || <code>space-between</code> || <code>space-around</code> || <code>stretch</code>;</li>\n<li>align-content: stretch;默认值,各行将会伸展以占用剩余的空间。<br>其他可以参考[<code>justify-content</code>]用法。</li>\n</ul>\n<p>具体图片来至w3.org官方文档；</p>\n<p><img src=\"http://7xjdah.com1.z0.glb.clouddn.com/pic2016062309.png\" alt=\"img\"></p>\n<p>太麻烦。写不下去了，摔。</p>\n<h3 id=\"Flex项目\"><a href=\"#Flex项目\" class=\"headerlink\" title=\"Flex项目\"></a>Flex项目</h3><p>终于写到关于伸缩项目的相关属性了，主要是3个，order，flex（flex-grow，flex-shrink，flex-basis的组合），align-self；用来比较多的是前两个。</p>\n<h5 id=\"order\"><a href=\"#order\" class=\"headerlink\" title=\"order\"></a>order</h5><p>有一种用法比较多，想设置一组中有两个元素一个排第一，另外一个排最后，主需要将第一个的order:-1；另一个为order:0;这样就好了。</p>\n<p>譬如我们想控制一个container中有4个box，想box4为一个显示，box1为最后一个显示。只需要 这样</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt; style&gt;</div><div class=\"line\">.container&#123;</div><div class=\"line\">        display: flex;</div><div class=\"line\">    &#125;</div><div class=\"line\">    .box1&#123;</div><div class=\"line\">        order:1;</div><div class=\"line\">    &#125;</div><div class=\"line\">    .box4&#123;</div><div class=\"line\">        order:-1;</div><div class=\"line\">    &#125;</div><div class=\"line\">&lt;/style&gt;</div><div class=\"line\">&lt; div class=&quot;container&quot;&gt;</div><div class=\"line\">    &lt;div class=&quot;box1&quot;&gt;1&lt;/div&gt;</div><div class=\"line\">    &lt;div class=&quot;box2&quot;&gt;2&lt;/div&gt;</div><div class=\"line\">    &lt;div class=&quot;box3&quot;&gt;3&lt;/div&gt;</div><div class=\"line\">    &lt;div class=&quot;box4&quot;&gt;4&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>显示效果就这样了：<br><img src=\"http://7xjdah.com1.z0.glb.clouddn.com/pic2016062311.png\" alt=\"img\"></p>\n<h5 id=\"flex\"><a href=\"#flex\" class=\"headerlink\" title=\"flex\"></a>flex</h5><p>[flex]属性可以用来指定可伸缩长度的部件，是flex-grow（扩展比例）,flow-shrink（收缩比例）,flex-basis（伸缩基准值）这个三个属性的缩写写法，建议大家采用缩写的方式而不是单独来使用这3个属性。</p>\n<p>flex:none | [ &lt;’flex-grow’&gt; ?&lt;’flew-shrink’&gt; || &lt;’flow-basis’&gt;]<br>// flex-grow是必须得flex-shrink和flow-basis是可选的</p>\n<p>flex-grow:;其中number作为扩展比例，没有单位，初始值是0，主要用来决定伸缩容器剩余空间按比例应扩展多少空间。<br>flex-grow:;其中number作为收缩比例，没有单位，初始值是1，也就是剩余空间是负值的时候此伸缩项目相对于伸缩容器里其他伸缩项目能收缩的空间比例，在收缩的时候收缩比率会以[flex-basis]伸缩基准值加权。<br>flex-basis:|auto;默认是auto也就是根据可伸缩比率计算出剩余空间的分布之前，伸缩项目主轴长度的起始数值。若在「flex」缩写省略了此部件，则「flex-basis」的指定值是长度零。</p>\n<p>flex-basis用图来表示就是这样：<br><img src=\"http://7xjdah.com1.z0.glb.clouddn.com/pic2016062312.png\" alt=\"img\"></p>\n<h5 id=\"align-self\"><a href=\"#align-self\" class=\"headerlink\" title=\"align-self\"></a>align-self</h5><p>[align-self]用来在单独的伸缩项目上覆写默认的对齐方式，这个属性是用来覆盖伸缩容器属性align-items对每一行的对齐方式。也就是说在默认的情况下这两个值是相等的。</p>\n<p>align-self: auto | flex-start | flex-end | center | baseline | stretch</p>\n<h3 id=\"我的看法\"><a href=\"#我的看法\" class=\"headerlink\" title=\"我的看法\"></a>我的看法</h3><p>讲了这么多他们的使用，我们来看一看flexbox布局的兼容性。</p>\n<h6 id=\"具体大家可以见这个网站：caniuse\"><a href=\"#具体大家可以见这个网站：caniuse\" class=\"headerlink\" title=\"具体大家可以见这个网站：caniuse\"></a>具体大家可以见这个网站：<a href=\"http://caniuse.com/#search=flexbox\" target=\"_blank\" rel=\"external\">caniuse</a></h6><p>在PC端其实很乐观了，基本上主流的浏览器都已经兼容了flex的使用，但是到了移动端就不是那么好了，特别是国内浏览器，考虑到uc浏览器占了大头，但是uc从图中看到只兼容flex最老的一个版本，也就是2009年的版本，即display:box;很多现在flex的优秀特性到了它上面都不兼容了，所以建议大家在使用的时候，假如2009版本可以满足开发要求的话，还是去使用2009版本，这样风险更小。</p>\n<p>但是假如想兼容多个浏览器，可以采用优雅降级的方式来使用，这里推荐一个scss的sass-flex-mixin,这样就可以使用最新的写法，并且兼容大部分浏览器了。</p>\n<p>相信flexbox布局在以后的移动端会用得越来越多的。</p>\n","categories":[],"tags":[{"name":"css","path":"api/tags/css.json"}]}